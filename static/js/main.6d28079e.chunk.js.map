{"version":3,"sources":["forms/AddUserForm.js","forms/EditUserForm.js","tables/UserTable.js","App.js","serviceWorker.js","index.js"],"names":["AddUserForm","props","useState","id","name","username","user","setUser","handleInputChange","event","currentTarget","value","onSubmit","preventDefault","addUser","type","onChange","class","EditUserForm","currentUser","useEffect","target","updateUser","className","onClick","setEditing","UserTable","users","length","map","key","editRow","window","confirm","deleteUser","colSpan","App","setUsers","editing","setCurrentUser","updatedUser","filter","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wOAEMA,EAAc,SAAAC,GAClB,IAD2B,EAEHC,mBADC,CAAEC,GAAI,KAAMC,KAAM,GAAIC,SAAU,KAD9B,mBAEpBC,EAFoB,KAEdC,EAFc,KAIrBC,EAAoB,SAAAC,GAAU,IAAD,EACTA,EAAMC,cAAtBN,EADyB,EACzBA,KAAMO,EADmB,EACnBA,MACdJ,EAAQ,eAAKD,EAAN,eAAaF,EAAOO,MAS7B,OACE,0BAAMC,SAPW,SAAAH,GACfA,EAAMI,iBACFP,EAAKF,MAAOE,EAAKD,UACrBJ,EAAMa,QAAQR,KAKd,wCADF,WAEE,2BACES,KAAK,OACLX,KAAK,OACLO,MAAOL,EAAKF,KACZY,SAAUR,IANd,WASE,4CATF,WAWE,2BACEO,KAAK,OACLX,KAAK,WACLO,MAAOL,EAAKD,SACZW,SAAUR,IAfd,WAkBE,4BAAQS,MAAM,mBAAd,kBClCAC,EAAa,SAAAjB,GAAQ,IAAD,EACDC,mBAASD,EAAMkB,aADd,mBACfb,EADe,KACVC,EADU,KAGtBa,qBACI,WACIb,EAAQN,EAAMkB,eAElB,CAAClB,IAEL,IAAMO,EAAkB,SAAAC,GAAQ,IAAD,EACRA,EAAMY,OAAlBjB,EADoB,EACpBA,KAAKO,EADe,EACfA,MAEZJ,EAAQ,eAAID,EAAL,eAAWF,EAAMO,MAS5B,OACI,0BAAMC,SAPS,SAAAH,GACfA,EAAMI,iBACFP,EAAKF,MAAOE,EAAKD,UACrBJ,EAAMqB,WAAWhB,EAAKH,GAAGG,KAKrB,wCADJ,WAEI,2BACAS,KAAK,OACLX,KAAK,OACLO,MAAOL,EAAKF,KACZY,SAAUR,IANd,WASI,4CATJ,WAWI,2BACAO,KAAK,OACLX,KAAK,WACLO,MAAOL,EAAKD,SACZW,SAAUR,IAfd,WAkBI,4BAAQe,UAAU,mBAAlB,eAlBJ,WAoBI,4BACAC,QAAS,kBAAIvB,EAAMwB,YAAW,IAC9BF,UAAU,qBAFV,YC1CNG,EAAY,SAAAzB,GAQhB,OACE,+BACE,+BACE,4BACE,qCACA,yCACA,0CAGJ,+BACGA,EAAM0B,MAAMC,OAAS,EACpB3B,EAAM0B,MAAME,KAAI,SAAAvB,GAAI,OAClB,wBAAIwB,IAAKxB,EAAKH,IACZ,4BAAKG,EAAKF,MACV,4BAAKE,EAAKD,UACV,4BACA,4BACImB,QAAS,WACPvB,EAAM8B,QAAQzB,IAEhBiB,UAAU,mBAJd,QADA,WASE,4BACEA,UAAU,iBACVC,QAAS,kBAjCArB,EAiCuBG,EAAKH,QAhCtC6B,OAAOC,QAAQ,wCAG1BhC,EAAMiC,WAAW/B,IAJI,IAAAA,IA+BX,eAUN,4BACE,wBAAIgC,QAAS,GAAb,gB,MCoBGC,MA3Df,WACE,IADa,EAMUlC,mBALR,CACb,CAACC,GAAI,EAAGC,KAAK,mBAAoBC,SAAS,WAC1C,CAACF,GAAI,EAAGC,KAAM,SAASC,SAAS,gBAHrB,mBAMNsB,EANM,KAMAU,EANA,OAOcnC,oBAAS,GAPvB,mBAONoC,EAPM,KAOEb,EAPF,OASwBvB,mBADd,CAACC,GAAG,KAAKC,KAAK,GAAGC,SAAS,KARpC,mBASNc,EATM,KASMoB,EATN,KA4Bb,OACE,yBAAKhB,UAAU,aACb,mDACA,yBAAKA,UAAU,YACb,yBAAKA,UAAU,cACZe,EACC,6BACE,yCACA,kBAAC,EAAD,CACEA,QAASA,EACTb,WAAYA,EACZN,YAAaA,EACbG,WArBG,SAACnB,EAAGqC,GACnBf,GAAW,GACXY,EAASV,EAAME,KAAI,SAAAvB,GAAI,OAAGA,EAAKH,KAAKA,EAAGqC,EAAYlC,UAuB3C,6BACE,wCACA,kBAAC,EAAD,CAAaQ,QAnCX,SAAAR,GACZA,EAAKH,GAAGwB,EAAMC,OAAO,EACrBS,EAAS,GAAD,mBAAKV,GAAL,CAAWrB,UAqCf,yBAAKiB,UAAU,cACb,0CACA,kBAAC,EAAD,CAAWI,MAAOA,EAAOI,QA7BnB,SAAAzB,GACZmB,GAAW,GACXc,EAAe,CAACpC,GAAGG,EAAKH,GAAGC,KAAKE,EAAKF,KAAKC,SAASC,EAAKD,YA2BP6B,WArClC,SAAA/B,GACfsB,GAAW,GACXY,EAASV,EAAMc,QAAO,SAAAnC,GAAI,OAAEA,EAAKH,KAAKA,aCXtBuC,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6d28079e.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nconst AddUserForm = props => {\r\n  const initialFormState = { id: null, name: '', username: '' }\r\n  const [user, setUser] = useState(initialFormState)\r\n\r\n  const handleInputChange = event => {\r\n    const { name, value } = event.currentTarget\r\n    setUser({ ...user, [name]: value })\r\n  }\r\n\r\n  const handleSubmit=event=>{\r\n      event.preventDefault()\r\n      if(!user.name||!user.username) return\r\n      props.addUser(user);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>Name:</label>&nbsp;&nbsp;\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        value={user.name}\r\n        onChange={handleInputChange}\r\n      />\r\n      &nbsp;&nbsp;\r\n      <label>Username:</label>\r\n      &nbsp;&nbsp;\r\n      <input\r\n        type=\"text\"\r\n        name=\"username\"\r\n        value={user.username}\r\n        onChange={handleInputChange}\r\n      />\r\n      &nbsp;&nbsp;\r\n      <button class=\"btn btn-primary\">Add new user</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport { AddUserForm }","import React, {useState, useEffect} from 'react';\r\n\r\nconst EditUserForm=props=>{\r\n    const [user,setUser]=useState(props.currentUser)\r\n\r\n    useEffect(\r\n        ()=>{\r\n            setUser(props.currentUser)\r\n        },\r\n        [props]\r\n    )\r\n    const handleInputChange=event=>{\r\n        const {name,value}=event.target\r\n\r\n        setUser({...user,[name]:value})\r\n    }\r\n\r\n    const handleSubmit=event=>{\r\n        event.preventDefault()\r\n        if(!user.name||!user.username) return\r\n        props.updateUser(user.id,user)\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <label>Name:</label>&nbsp;&nbsp;\r\n            <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={user.name}\r\n            onChange={handleInputChange}\r\n            />\r\n            &nbsp;&nbsp;\r\n            <label>Username:</label>\r\n            &nbsp;&nbsp;\r\n            <input\r\n            type=\"text\"\r\n            name=\"username\"\r\n            value={user.username}\r\n            onChange={handleInputChange}\r\n            />\r\n            &nbsp;&nbsp;\r\n            <button className=\"btn btn-primary\">Update user</button>\r\n            &nbsp;&nbsp;\r\n            <button\r\n            onClick={()=>props.setEditing(false)}\r\n            className=\"btn btn-secondary\"\r\n            >Cancel</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport {EditUserForm};","import React from 'react';\r\n\r\nconst UserTable = props => {\r\n  const handleDeleteUser = id => {\r\n    let answer = window.confirm('Are you sure to delete this record?')\r\n\r\n    if (answer) {\r\n      props.deleteUser(id)\r\n    }\r\n  }\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th>Name:</th>\r\n          <th>Username:</th>\r\n          <th>Actions:</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {props.users.length > 0 ? (\r\n          props.users.map(user => (\r\n            <tr key={user.id}>\r\n              <td>{user.name}</td>\r\n              <td>{user.username}</td>\r\n              <td>\r\n              <button\r\n                  onClick={() => {\r\n                    props.editRow(user)\r\n                  }}\r\n                  className=\"btn btn-success\"\r\n                >\r\n                  Edit\r\n                </button>&nbsp;&nbsp;\r\n                <button\r\n                  className=\"btn btn-danger\"\r\n                  onClick={() => handleDeleteUser(user.id)}\r\n                >\r\n                  Delete\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          ))\r\n        ) : (\r\n          <tr>\r\n            <td colSpan={3}>No users</td>\r\n          </tr>\r\n        )}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\nexport { UserTable }","import React, {useState} from 'react';\nimport {AddUserForm} from './forms/AddUserForm';\nimport {EditUserForm} from './forms/EditUserForm';\nimport {UserTable} from './tables/UserTable';\nimport './App.css';\n\nfunction App() {\n  const userData=[\n    {id: 1, name:'Dadaxon Sharofov', username:'shdo123'},\n    {id: 2, name: 'Dilyor',username:'dilyor1991'},\n  ]\n \n  const [users,setUsers]=useState(userData);\n  const [editing,setEditing]=useState(false);\n  const initialFormState={id:null,name:'',username:''};\n  const [currentUser,setCurrentUser] = useState(initialFormState);\n\n  const addUser=user=>{\n    user.id=users.length+1;\n    setUsers([...users,user])\n  }\n  const deleteUser=id=>{\n    setEditing(false);\n    setUsers(users.filter(user=>user.id!==id))\n  }\n  const updateUser=(id,updatedUser)=>{\n    setEditing(false);\n    setUsers(users.map(user=>(user.id===id?updatedUser:user)))\n  }\n  const editRow=user=>{\n    setEditing(true);\n    setCurrentUser({id:user.id,name:user.name,username:user.username});\n  }\n\n  return (\n    <div className=\"container\">\n      <h1>CRUD App with Hooks</h1>\n      <div className=\"flex-row\">\n        <div className=\"flex-large\">\n          {editing ? (\n            <div>\n              <h2>Edit user</h2>\n              <EditUserForm\n                editing={editing}\n                setEditing={setEditing}\n                currentUser={currentUser}\n                updateUser={updateUser}\n              />\n            </div>\n          ) : (\n            <div>\n              <h2>Add user</h2>\n              <AddUserForm addUser={addUser} />\n            </div>\n          )}\n        </div>\n        <div className=\"flex-large\">\n          <h2>View users</h2>\n          <UserTable users={users} editRow={editRow} deleteUser={deleteUser} />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}